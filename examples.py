"""
ุฃูุซูุฉ ุนูู ุงุณุชุฎุฏุงู HUSKYLENS
Examples for using HUSKYLENS

ุชุดุบูู ูุฐุง ุงูููู ูุงุฎุชุจุงุฑ ูุธุงุฆู HUSKYLENS ุงููุฎุชููุฉ
"""

from huskylens import HuskyLens, HuskyLensError
import time

def test_face_recognition():
    """ุงุฎุชุจุงุฑ ุงูุชุนุฑู ุนูู ุงููุฌูู"""
    print("๐ฆ ุงุฎุชุจุงุฑ ุงูุชุนุฑู ุนูู ุงููุฌูู...")
    
    # ุฅูุดุงุก ูุงุฆู HUSKYLENS
    husky = HuskyLens('COM3')  # ุบูุฑ ุงููููุฐ ุญุณุจ ูุธุงูู
    
    try:
        # ุงูุงุชุตุงู
        if not husky.connect():
            print("โ ูุดู ุงูุงุชุตุงู ูุน HUSKYLENS")
            return
        
        # ุชุนููู ูุถุน ุงูุชุนุฑู ุนูู ุงููุฌูู
        husky.set_algorithm(HuskyLens.FACE_RECOGNITION)
        
        print("๐ค ุงุจุญุซ ุนู ุงููุฌูู ููุฏุฉ 10 ุซูุงูู...")
        start_time = time.time()
        
        while time.time() - start_time < 10:
            faces = husky.get_blocks()
            
            if faces:
                print(f"๐ฏ ุชู ุงูุนุซูุฑ ุนูู {len(faces)} ูุฌู:")
                for i, face in enumerate(faces):
                    print(f"  ุงููุฌู {i+1}: {face}")
            else:
                print("๐ ูุง ุชูุฌุฏ ูุฌูู ููุชุดูุฉ...")
            
            time.sleep(1)
    
    except Exception as e:
        print(f"โ ุฎุทุฃ: {e}")
    
    finally:
        husky.disconnect()

def test_object_tracking():
    """ุงุฎุชุจุงุฑ ุชุชุจุน ุงููุงุฆูุงุช"""
    print("๐ฉ ุงุฎุชุจุงุฑ ุชุชุจุน ุงููุงุฆูุงุช...")
    
    husky = HuskyLens('COM3')
    
    try:
        if not husky.connect():
            return
        
        husky.set_algorithm(HuskyLens.OBJECT_TRACKING)
        
        print("๐ฆ ุถุน ูุงุฆูุงู ุฃูุงู ุงููุงููุฑุง ูุญุฑูู...")
        
        for i in range(20):
            objects = husky.get_blocks()
            
            if objects:
                obj = objects[0]  # ุฃูู ูุงุฆู
                print(f"๐ ุงููุงุฆู ูู ุงููููุน: ({obj.center_x}, {obj.center_y})")
                
                # ุชุญุฏูุฏ ุงุชุฌุงู ุงูุญุฑูุฉ
                if obj.center_x < 160:  # ูุณุงุฑ (ุงูุชุฑุงุถ ุนุฑุถ ุงูุดุงุดุฉ 320)
                    print("โฌ๏ธ ุงููุงุฆู ุนูู ุงููุณุงุฑ")
                elif obj.center_x > 160:
                    print("โก๏ธ ุงููุงุฆู ุนูู ุงููููู")
                else:
                    print("๐ฏ ุงููุงุฆู ูู ุงูููุชุตู")
            else:
                print("๐ ูุง ููุฌุฏ ูุงุฆู ููุชุดู...")
            
            time.sleep(0.5)
    
    except Exception as e:
        print(f"โ ุฎุทุฃ: {e}")
    
    finally:
        husky.disconnect()

def test_color_recognition():
    """ุงุฎุชุจุงุฑ ุงูุชุนุฑู ุนูู ุงูุฃููุงู"""
    print("๐จ ุงุฎุชุจุงุฑ ุงูุชุนุฑู ุนูู ุงูุฃููุงู...")
    
    husky = HuskyLens('COM3')
    
    try:
        if not husky.connect():
            return
        
        husky.set_algorithm(HuskyLens.COLOR_RECOGNITION)
        
        print("๐จ ุฃููุงูุ ุนููู HUSKYLENS ูููุงู ูุนููุงู...")
        print("ุถุน ูุงุฆูุงู ููููุงู ุฃูุงู ุงููุงููุฑุง ูุงุถุบุท Enter ูุชุนูููู...")
        input()
        
        husky.learn_object(1)
        print("โ ุชู ุชุนูู ุงูููู!")
        
        print("๐ ุงูุขู ุงุจุญุซ ุนู ููุณ ุงูููู...")
        
        for i in range(15):
            colors = husky.get_blocks()
            
            if colors:
                print(f"๐ฏ ุชู ุงูุนุซูุฑ ุนูู {len(colors)} ูุงุฆู ุจููุณ ุงูููู:")
                for j, color in enumerate(colors):
                    print(f"  ุงูููู {j+1}: {color}")
            else:
                print("๐ ูุง ููุฌุฏ ููู ูุทุงุจู...")
            
            time.sleep(1)
    
    except Exception as e:
        print(f"โ ุฎุทุฃ: {e}")
    
    finally:
        husky.disconnect()

def test_line_tracking():
    """ุงุฎุชุจุงุฑ ุชุชุจุน ุงูุฎุทูุท"""
    print("๐ช ุงุฎุชุจุงุฑ ุชุชุจุน ุงูุฎุทูุท...")
    
    husky = HuskyLens('COM3')
    
    try:
        if not husky.connect():
            return
        
        husky.set_algorithm(HuskyLens.LINE_TRACKING)
        
        print("๐ ุถุน ุฎุทุงู ุฃุณูุฏ ุนูู ุฎูููุฉ ุจูุถุงุก ุฃูุงู ุงููุงููุฑุง...")
        
        for i in range(10):
            arrows = husky.get_arrows()
            
            if arrows:
                print(f"๐ ุชู ุงูุนุซูุฑ ุนูู {len(arrows)} ุฎุท:")
                for j, arrow in enumerate(arrows):
                    print(f"  ุงูุฎุท {j+1}: ูู ({arrow[0]}, {arrow[1]}) ุฅูู ({arrow[2]}, {arrow[3]})")
            else:
                print("๐ ูุง ุชูุฌุฏ ุฎุทูุท ููุชุดูุฉ...")
            
            time.sleep(1)
    
    except Exception as e:
        print(f"โ ุฎุทุฃ: {e}")
    
    finally:
        husky.disconnect()

def interactive_demo():
    """ุนุฑุถ ุชูุงุนูู ูุฌููุน ุงููุธุงุฆู"""
    print("๐ ูุฑุญุจุงู ุจู ูู ุนุฑุถ HUSKYLENS ุงูุชูุงุนูู!")
    print("=" * 50)
    
    while True:
        print("\n๐ฏ ุงุฎุชุฑ ุงููุธููุฉ ุงูุชู ุชุฑูุฏ ุงุฎุชุจุงุฑูุง:")
        print("1๏ธโฃ  ุงูุชุนุฑู ุนูู ุงููุฌูู")
        print("2๏ธโฃ  ุชุชุจุน ุงููุงุฆูุงุช")
        print("3๏ธโฃ  ุงูุชุนุฑู ุนูู ุงูุฃููุงู")
        print("4๏ธโฃ  ุชุชุจุน ุงูุฎุทูุท")
        print("5๏ธโฃ  ุฃุฎุฐ ููุทุฉ ุดุงุดุฉ")
        print("0๏ธโฃ  ุฎุฑูุฌ")
        
        choice = input("\n๐ ุงุฎุชูุงุฑู: ").strip()
        
        if choice == '1':
            test_face_recognition()
        elif choice == '2':
            test_object_tracking()
        elif choice == '3':
            test_color_recognition()
        elif choice == '4':
            test_line_tracking()
        elif choice == '5':
            test_screenshot()
        elif choice == '0':
            print("๐ ูุฏุงุนุงู!")
            break
        else:
            print("โ ุงุฎุชูุงุฑ ุบูุฑ ุตุญูุญุ ุญุงูู ูุฑุฉ ุฃุฎุฑู")

def test_screenshot():
    """ุงุฎุชุจุงุฑ ุฃุฎุฐ ููุทุฉ ุดุงุดุฉ"""
    print("๐ธ ุงุฎุชุจุงุฑ ุฃุฎุฐ ููุทุฉ ุดุงุดุฉ...")
    
    husky = HuskyLens('COM3')
    
    try:
        if not husky.connect():
            return
        
        timestamp = int(time.time())
        filename = f"huskylens_photo_{timestamp}.jpg"
        
        if husky.take_screenshot(filename):
            print(f"โ ุชู ุญูุธ ุงูุตูุฑุฉ: {filename}")
        else:
            print("โ ูุดู ูู ุฃุฎุฐ ููุทุฉ ุงูุดุงุดุฉ")
    
    except Exception as e:
        print(f"โ ุฎุทุฃ: {e}")
    
    finally:
        husky.disconnect()

if __name__ == "__main__":
    print("๐ค HUSKYLENS Python Controller")
    print("๐ ุชุฃูุฏ ูู ุชูุตูู HUSKYLENS ุจุงููููุฐ ุงูุชุณูุณูู")
    print("โ๏ธ  ูู ุจุชุบููุฑ ุงููููุฐ ูู ุงูููุฏ ุญุณุจ ูุธุงูู (COM3, /dev/ttyUSB0, ุฅูุฎ)")
    print()
    
    interactive_demo()
